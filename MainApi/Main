using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Web.Mvc;
using System.Timers;


public class Program
{
    public class MyBackgroundService : BackgroundService
    {
        private readonly ILogger<MyBackgroundService> _logger;

        public MyBackgroundService(ILogger<MyBackgroundService> logger)
        {
            _logger = logger;
        }

        protected async override Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                _logger.LogInformation("Background task is running");
                await Task.Delay(TimeSpan.FromMinutes(5), stoppingToken);
            }
        }
    }

    public void ConfigureServices(IServiceCollection services) => services.AddHostedService<MyBackgroundService>();

    public class PaymentProcessor
    {
        private PaymentService paymentService;

        public PaymentProcessor()
        {
            paymentService = new PaymentService();
        }

        public string MakePayment()
        {
            bool paymentProcessed = false;
        
            while (!paymentProcessed)
            {
                Console.WriteLine("Payment is in progress...");
                Thread.Sleep(20000); 
                paymentProcessed = paymentService.ProcessPayment();
            }

            return "Payment has been processed successfully.";
        }
    }
    
}

public class Program
{
    public static void Main()
    {
        PaymentProcessor paymentProcessor = new PaymentProcessor();
        string paymentStatus = paymentProcessor.MakePayment();
        Console.WriteLine(paymentStatus); // Return payment status to the client
    }
}
